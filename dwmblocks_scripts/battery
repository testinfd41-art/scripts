#!/bin/sh

# Prints all batteries, their percentage remaining and an emoji corresponding
# to charge status (üîå for plugged up, üîã for discharging on battery, etc.).

case $BLOCK_BUTTON in
    3) notify-send "üîã Battery module"Ó∫û "üîã: discharging
: not charging
: stagnant charge
Ôá¶ : charging
‚ö°: charged
Û∞Å∫: battery very low!
- Scroll to change adjust xbacklight." ;;
    4) xbacklight -inc 10 ;;
    5) xbacklight -dec 10 ;;
    6) setsid -f "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# Loop through all attached batteries and format the info
for battery in /sys/class/power_supply/BAT?*; do
    [ -n "${capacity+x}" ] && printf " "
    
    status="$(cat "$battery/status" 2>/dev/null)"
    capacity="$(cat "$battery/capacity" 2>/dev/null)"
    
    # ====== Add dynamic battery icon logic here ======
    # For example, using a simple if ladder
    if [ "$status" = "Charging" ]; then
        baticon="Ôá¶ "
    elif [ "$capacity" -le 10 ]; then baticon="Û∞Å∫ "
    elif [ "$capacity" -le 20 ]; then baticon="Û∞Åª "
    elif [ "$capacity" -le 30 ]; then baticon="Û∞Åº "
    elif [ "$capacity" -le 40 ]; then baticon="Û∞ÅΩ "
    elif [ "$capacity" -le 50 ]; then baticon="Û∞Åæ "
    elif [ "$capacity" -le 60 ]; then baticon="Û∞Åø "
    elif [ "$capacity" -le 70 ]; then baticon="Û∞ÇÄ "
    elif [ "$capacity" -le 80 ]; then baticon="Û∞ÇÅ "
    elif [ "$capacity" -le 90 ]; then baticon="Û∞ÇÇ "
    elif [ "$capacity" -le 99 ]; then baticon="Û∞Åπ "
    else baticon="Û∞Åπ "
    fi
    # =================================================

    # Will make a warn variable if discharging and low
    [ "$status" = "Û∞Çé" ] && [ "$capacity" -le 20 ] && warn="Û∞Çé"

    # Prints the info
    printf "%s%s%d%%" "$baticon" "$warn" "$capacity"; unset warn
done && printf "\\n"
